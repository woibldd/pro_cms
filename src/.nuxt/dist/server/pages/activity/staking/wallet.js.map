{"version":3,"file":"pages/activity/staking/wallet.js","sources":["webpack:///./pages/activity/staking/wallet.js"],"sourcesContent":["// import detectEthereumProvider from '@metamask/detect-provider';\nimport eventemitter3 from 'eventemitter3'\n// import { transfer16 } from '../common/common'\nexport function transfer16(val='1'){\n  val = isNaN(Number(val))? 1 : Number(val)\n  return \"0x\" + val.toString(16)\n}\nclass Wallet extends eventemitter3 {\n  constructor() {\n    super()\n    this._accounts = []\n    this._chainId = 0\n    this._walletPlatform = 'bitkeep'\n  }\n\n  // 是否安装 bitkeep 钱包\n  isInstall() {\n    const isInstalled = !!window.ethereum && !!window.isBitKeep;\n    !isInstalled && console.warn(\"no installed bitkeep\")\n    return isInstalled;\n  }\n\n  // 是否连接中\n  isConnected() {\n    return window.ethereum && window.ethereum.isConnected()\n  }\n\n  // 连接钱包\n  async connect() {\n    if (this.isInstall()) {\n      const Accounts = await ethereum.request({ method: 'eth_requestAccounts' })\n      this.initEvent()\n      return Accounts[0]\n    } else {\n      return {\n        status: 50001,\n        message: 'please download bitkeep chrome '\n      }\n    }\n  }\n\n  // 切换地址\n  selectedAddress() {\n    return window.ethereum && ethereum.selectedAddress\n  }\n\n  // 获取钱包信息\n  getWalletInfo(){\n    return {\n      address: window.ethereum && ethereum.selectedAddress,\n      chainName: window.ethereum && window.ethereum.chainName || 'eth',\n      chainId: window.ethereum && window.ethereum.chainId || '1',\n      walletId: '',\n      walletPlatform: this.getWalletPlatform()\n    }\n  }\n\n  // 获取 chain ID\n  async getChainId() {\n    return window.ethereum && window.ethereum.request({ method: 'eth_chainId' })\n  }\n\n  // 切换 chain ID\n  async switchChainId(chainId ,address){\n    if(!address){\n      const [ nAddress ] =  await this.getAccounts()\n      address = nAddress\n    }\n    return window.ethereum && window.ethereum.request({ method: 'wallet_switchEthereumChain', params:[ { chainId:transfer16(chainId) }, address] })\n  }\n\n  // 获取钱包标识\n  getWalletPlatform(){\n      return this._walletPlatform\n  } \n\n  // 获取钱包账号\n  async getAccounts() {\n    return window.ethereum ?  window.ethereum.request({method:\"eth_accounts\"}) : []\n  }\n\n  // 登录签名\n  async LoginSign(dataToSign, address) {\n    console.log(dataToSign, address,'dataToSign, addressdataToSign, addressdataToSign, address')\n    return await window.ethereum.request({method:\"personal_sign\", params:[dataToSign, address], from: address})\n    // return await window.ethereum.signMessage({ data: dataToSign })\n  }\n\n\n  initEvent() {\n    ethereum.removeAllListeners && ethereum.removeAllListeners()\n    // ethereum.removeListener && ethereum.removeListener('chainChanged')\n    ethereum.on('accountsChanged', async (...arg) => {\n      this.emit('accountsChanged', ...arg)\n    })\n    ethereum.on('chainChanged', async (...arg) => {\n      this.emit('chainChanged', ...arg)\n    })\n  }\n}\n\nexport const wallet = new Wallet()\n"],"mappings":";;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5FA;AACA;AA6FA;;;;A","sourceRoot":""}