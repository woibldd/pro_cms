{"version":3,"file":"components/vue-create-poster-layout-qrcode.js","sources":["webpack:///./components/vue-create-poster/layout/qrcode.js"],"sourcesContent":["/* eslint-disable */\r\n\r\n  // alignment pattern\r\n  var adelta = [\r\n    0, 11, 15, 19, 23, 27, 31,\r\n    16, 18, 20, 22, 24, 26, 28, 20, 22, 24, 24, 26, 28, 28, 22, 24, 24,\r\n    26, 26, 28, 28, 24, 24, 26, 26, 26, 28, 28, 24, 26, 26, 26, 28, 28\r\n  ];\r\n\r\n  // version block\r\n  var vpat = [\r\n    0xc94, 0x5bc, 0xa99, 0x4d3, 0xbf6, 0x762, 0x847, 0x60d,\r\n    0x928, 0xb78, 0x45d, 0xa17, 0x532, 0x9a6, 0x683, 0x8c9,\r\n    0x7ec, 0xec4, 0x1e1, 0xfab, 0x08e, 0xc1a, 0x33f, 0xd75,\r\n    0x250, 0x9d5, 0x6f0, 0x8ba, 0x79f, 0xb0b, 0x42e, 0xa64,\r\n    0x541, 0xc69\r\n  ];\r\n\r\n  // final format bits with mask: level << 3 | mask\r\n  var fmtword = [\r\n    0x77c4, 0x72f3, 0x7daa, 0x789d, 0x662f, 0x6318, 0x6c41, 0x6976,    //L\r\n    0x5412, 0x5125, 0x5e7c, 0x5b4b, 0x45f9, 0x40ce, 0x4f97, 0x4aa0,    //M\r\n    0x355f, 0x3068, 0x3f31, 0x3a06, 0x24b4, 0x2183, 0x2eda, 0x2bed,    //Q\r\n    0x1689, 0x13be, 0x1ce7, 0x19d0, 0x0762, 0x0255, 0x0d0c, 0x083b    //H\r\n  ];\r\n\r\n  // 4 per version: number of blocks 1,2; data width; ecc width\r\n  var eccblocks = [\r\n    1, 0, 19, 7, 1, 0, 16, 10, 1, 0, 13, 13, 1, 0, 9, 17,\r\n    1, 0, 34, 10, 1, 0, 28, 16, 1, 0, 22, 22, 1, 0, 16, 28,\r\n    1, 0, 55, 15, 1, 0, 44, 26, 2, 0, 17, 18, 2, 0, 13, 22,\r\n    1, 0, 80, 20, 2, 0, 32, 18, 2, 0, 24, 26, 4, 0, 9, 16,\r\n    1, 0, 108, 26, 2, 0, 43, 24, 2, 2, 15, 18, 2, 2, 11, 22,\r\n    2, 0, 68, 18, 4, 0, 27, 16, 4, 0, 19, 24, 4, 0, 15, 28,\r\n    2, 0, 78, 20, 4, 0, 31, 18, 2, 4, 14, 18, 4, 1, 13, 26,\r\n    2, 0, 97, 24, 2, 2, 38, 22, 4, 2, 18, 22, 4, 2, 14, 26,\r\n    2, 0, 116, 30, 3, 2, 36, 22, 4, 4, 16, 20, 4, 4, 12, 24,\r\n    2, 2, 68, 18, 4, 1, 43, 26, 6, 2, 19, 24, 6, 2, 15, 28,\r\n    4, 0, 81, 20, 1, 4, 50, 30, 4, 4, 22, 28, 3, 8, 12, 24,\r\n    2, 2, 92, 24, 6, 2, 36, 22, 4, 6, 20, 26, 7, 4, 14, 28,\r\n    4, 0, 107, 26, 8, 1, 37, 22, 8, 4, 20, 24, 12, 4, 11, 22,\r\n    3, 1, 115, 30, 4, 5, 40, 24, 11, 5, 16, 20, 11, 5, 12, 24,\r\n    5, 1, 87, 22, 5, 5, 41, 24, 5, 7, 24, 30, 11, 7, 12, 24,\r\n    5, 1, 98, 24, 7, 3, 45, 28, 15, 2, 19, 24, 3, 13, 15, 30,\r\n    1, 5, 107, 28, 10, 1, 46, 28, 1, 15, 22, 28, 2, 17, 14, 28,\r\n    5, 1, 120, 30, 9, 4, 43, 26, 17, 1, 22, 28, 2, 19, 14, 28,\r\n    3, 4, 113, 28, 3, 11, 44, 26, 17, 4, 21, 26, 9, 16, 13, 26,\r\n    3, 5, 107, 28, 3, 13, 41, 26, 15, 5, 24, 30, 15, 10, 15, 28,\r\n    4, 4, 116, 28, 17, 0, 42, 26, 17, 6, 22, 28, 19, 6, 16, 30,\r\n    2, 7, 111, 28, 17, 0, 46, 28, 7, 16, 24, 30, 34, 0, 13, 24,\r\n    4, 5, 121, 30, 4, 14, 47, 28, 11, 14, 24, 30, 16, 14, 15, 30,\r\n    6, 4, 117, 30, 6, 14, 45, 28, 11, 16, 24, 30, 30, 2, 16, 30,\r\n    8, 4, 106, 26, 8, 13, 47, 28, 7, 22, 24, 30, 22, 13, 15, 30,\r\n    10, 2, 114, 28, 19, 4, 46, 28, 28, 6, 22, 28, 33, 4, 16, 30,\r\n    8, 4, 122, 30, 22, 3, 45, 28, 8, 26, 23, 30, 12, 28, 15, 30,\r\n    3, 10, 117, 30, 3, 23, 45, 28, 4, 31, 24, 30, 11, 31, 15, 30,\r\n    7, 7, 116, 30, 21, 7, 45, 28, 1, 37, 23, 30, 19, 26, 15, 30,\r\n    5, 10, 115, 30, 19, 10, 47, 28, 15, 25, 24, 30, 23, 25, 15, 30,\r\n    13, 3, 115, 30, 2, 29, 46, 28, 42, 1, 24, 30, 23, 28, 15, 30,\r\n    17, 0, 115, 30, 10, 23, 46, 28, 10, 35, 24, 30, 19, 35, 15, 30,\r\n    17, 1, 115, 30, 14, 21, 46, 28, 29, 19, 24, 30, 11, 46, 15, 30,\r\n    13, 6, 115, 30, 14, 23, 46, 28, 44, 7, 24, 30, 59, 1, 16, 30,\r\n    12, 7, 121, 30, 12, 26, 47, 28, 39, 14, 24, 30, 22, 41, 15, 30,\r\n    6, 14, 121, 30, 6, 34, 47, 28, 46, 10, 24, 30, 2, 64, 15, 30,\r\n    17, 4, 122, 30, 29, 14, 46, 28, 49, 10, 24, 30, 24, 46, 15, 30,\r\n    4, 18, 122, 30, 13, 32, 46, 28, 48, 14, 24, 30, 42, 32, 15, 30,\r\n    20, 4, 117, 30, 40, 7, 47, 28, 43, 22, 24, 30, 10, 67, 15, 30,\r\n    19, 6, 118, 30, 18, 31, 47, 28, 34, 34, 24, 30, 20, 61, 15, 30\r\n  ];\r\n\r\n  // Galois field log table\r\n  var glog = [\r\n    0xff, 0x00, 0x01, 0x19, 0x02, 0x32, 0x1a, 0xc6, 0x03, 0xdf, 0x33, 0xee, 0x1b, 0x68, 0xc7, 0x4b,\r\n    0x04, 0x64, 0xe0, 0x0e, 0x34, 0x8d, 0xef, 0x81, 0x1c, 0xc1, 0x69, 0xf8, 0xc8, 0x08, 0x4c, 0x71,\r\n    0x05, 0x8a, 0x65, 0x2f, 0xe1, 0x24, 0x0f, 0x21, 0x35, 0x93, 0x8e, 0xda, 0xf0, 0x12, 0x82, 0x45,\r\n    0x1d, 0xb5, 0xc2, 0x7d, 0x6a, 0x27, 0xf9, 0xb9, 0xc9, 0x9a, 0x09, 0x78, 0x4d, 0xe4, 0x72, 0xa6,\r\n    0x06, 0xbf, 0x8b, 0x62, 0x66, 0xdd, 0x30, 0xfd, 0xe2, 0x98, 0x25, 0xb3, 0x10, 0x91, 0x22, 0x88,\r\n    0x36, 0xd0, 0x94, 0xce, 0x8f, 0x96, 0xdb, 0xbd, 0xf1, 0xd2, 0x13, 0x5c, 0x83, 0x38, 0x46, 0x40,\r\n    0x1e, 0x42, 0xb6, 0xa3, 0xc3, 0x48, 0x7e, 0x6e, 0x6b, 0x3a, 0x28, 0x54, 0xfa, 0x85, 0xba, 0x3d,\r\n    0xca, 0x5e, 0x9b, 0x9f, 0x0a, 0x15, 0x79, 0x2b, 0x4e, 0xd4, 0xe5, 0xac, 0x73, 0xf3, 0xa7, 0x57,\r\n    0x07, 0x70, 0xc0, 0xf7, 0x8c, 0x80, 0x63, 0x0d, 0x67, 0x4a, 0xde, 0xed, 0x31, 0xc5, 0xfe, 0x18,\r\n    0xe3, 0xa5, 0x99, 0x77, 0x26, 0xb8, 0xb4, 0x7c, 0x11, 0x44, 0x92, 0xd9, 0x23, 0x20, 0x89, 0x2e,\r\n    0x37, 0x3f, 0xd1, 0x5b, 0x95, 0xbc, 0xcf, 0xcd, 0x90, 0x87, 0x97, 0xb2, 0xdc, 0xfc, 0xbe, 0x61,\r\n    0xf2, 0x56, 0xd3, 0xab, 0x14, 0x2a, 0x5d, 0x9e, 0x84, 0x3c, 0x39, 0x53, 0x47, 0x6d, 0x41, 0xa2,\r\n    0x1f, 0x2d, 0x43, 0xd8, 0xb7, 0x7b, 0xa4, 0x76, 0xc4, 0x17, 0x49, 0xec, 0x7f, 0x0c, 0x6f, 0xf6,\r\n    0x6c, 0xa1, 0x3b, 0x52, 0x29, 0x9d, 0x55, 0xaa, 0xfb, 0x60, 0x86, 0xb1, 0xbb, 0xcc, 0x3e, 0x5a,\r\n    0xcb, 0x59, 0x5f, 0xb0, 0x9c, 0xa9, 0xa0, 0x51, 0x0b, 0xf5, 0x16, 0xeb, 0x7a, 0x75, 0x2c, 0xd7,\r\n    0x4f, 0xae, 0xd5, 0xe9, 0xe6, 0xe7, 0xad, 0xe8, 0x74, 0xd6, 0xf4, 0xea, 0xa8, 0x50, 0x58, 0xaf\r\n  ];\r\n\r\n  // Galios field exponent table\r\n  var gexp = [\r\n    0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1d, 0x3a, 0x74, 0xe8, 0xcd, 0x87, 0x13, 0x26,\r\n    0x4c, 0x98, 0x2d, 0x5a, 0xb4, 0x75, 0xea, 0xc9, 0x8f, 0x03, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0,\r\n    0x9d, 0x27, 0x4e, 0x9c, 0x25, 0x4a, 0x94, 0x35, 0x6a, 0xd4, 0xb5, 0x77, 0xee, 0xc1, 0x9f, 0x23,\r\n    0x46, 0x8c, 0x05, 0x0a, 0x14, 0x28, 0x50, 0xa0, 0x5d, 0xba, 0x69, 0xd2, 0xb9, 0x6f, 0xde, 0xa1,\r\n    0x5f, 0xbe, 0x61, 0xc2, 0x99, 0x2f, 0x5e, 0xbc, 0x65, 0xca, 0x89, 0x0f, 0x1e, 0x3c, 0x78, 0xf0,\r\n    0xfd, 0xe7, 0xd3, 0xbb, 0x6b, 0xd6, 0xb1, 0x7f, 0xfe, 0xe1, 0xdf, 0xa3, 0x5b, 0xb6, 0x71, 0xe2,\r\n    0xd9, 0xaf, 0x43, 0x86, 0x11, 0x22, 0x44, 0x88, 0x0d, 0x1a, 0x34, 0x68, 0xd0, 0xbd, 0x67, 0xce,\r\n    0x81, 0x1f, 0x3e, 0x7c, 0xf8, 0xed, 0xc7, 0x93, 0x3b, 0x76, 0xec, 0xc5, 0x97, 0x33, 0x66, 0xcc,\r\n    0x85, 0x17, 0x2e, 0x5c, 0xb8, 0x6d, 0xda, 0xa9, 0x4f, 0x9e, 0x21, 0x42, 0x84, 0x15, 0x2a, 0x54,\r\n    0xa8, 0x4d, 0x9a, 0x29, 0x52, 0xa4, 0x55, 0xaa, 0x49, 0x92, 0x39, 0x72, 0xe4, 0xd5, 0xb7, 0x73,\r\n    0xe6, 0xd1, 0xbf, 0x63, 0xc6, 0x91, 0x3f, 0x7e, 0xfc, 0xe5, 0xd7, 0xb3, 0x7b, 0xf6, 0xf1, 0xff,\r\n    0xe3, 0xdb, 0xab, 0x4b, 0x96, 0x31, 0x62, 0xc4, 0x95, 0x37, 0x6e, 0xdc, 0xa5, 0x57, 0xae, 0x41,\r\n    0x82, 0x19, 0x32, 0x64, 0xc8, 0x8d, 0x07, 0x0e, 0x1c, 0x38, 0x70, 0xe0, 0xdd, 0xa7, 0x53, 0xa6,\r\n    0x51, 0xa2, 0x59, 0xb2, 0x79, 0xf2, 0xf9, 0xef, 0xc3, 0x9b, 0x2b, 0x56, 0xac, 0x45, 0x8a, 0x09,\r\n    0x12, 0x24, 0x48, 0x90, 0x3d, 0x7a, 0xf4, 0xf5, 0xf7, 0xf3, 0xfb, 0xeb, 0xcb, 0x8b, 0x0b, 0x16,\r\n    0x2c, 0x58, 0xb0, 0x7d, 0xfa, 0xe9, 0xcf, 0x83, 0x1b, 0x36, 0x6c, 0xd8, 0xad, 0x47, 0x8e, 0x00\r\n  ];\r\n\r\n  // Working buffers:\r\n  // data input and ecc append, image working buffer, fixed part of image, run lengths for badness\r\n  var strinbuf = [], eccbuf = [], qrframe = [], framask = [], rlens = [];\r\n  // Control values - width is based on version, last 4 are from table.\r\n  var version, width, neccblk1, neccblk2, datablkw, eccblkwid;\r\n  var ecclevel = 2;\r\n  // set bit to indicate cell in qrframe is immutable.  symmetric around diagonal\r\n  function setmask(x, y) {\r\n    var bt;\r\n    if (x > y) {\r\n      bt = x;\r\n      x = y;\r\n      y = bt;\r\n    }\r\n    // y*y = 1+3+5...\r\n    bt = y;\r\n    bt *= y;\r\n    bt += y;\r\n    bt >>= 1;\r\n    bt += x;\r\n    framask[bt] = 1;\r\n  }\r\n\r\n  // enter alignment pattern - black to qrframe, white to mask (later black frame merged to mask)\r\n  function putalign(x, y) {\r\n    var j;\r\n\r\n    qrframe[x + width * y] = 1;\r\n    for (j = -2; j < 2; j++) {\r\n      qrframe[(x + j) + width * (y - 2)] = 1;\r\n      qrframe[(x - 2) + width * (y + j + 1)] = 1;\r\n      qrframe[(x + 2) + width * (y + j)] = 1;\r\n      qrframe[(x + j + 1) + width * (y + 2)] = 1;\r\n    }\r\n    for (j = 0; j < 2; j++) {\r\n      setmask(x - 1, y + j);\r\n      setmask(x + 1, y - j);\r\n      setmask(x - j, y - 1);\r\n      setmask(x + j, y + 1);\r\n    }\r\n  }\r\n\r\n  //========================================================================\r\n  // Reed Solomon error correction\r\n  // exponentiation mod N\r\n  function modnn(x) {\r\n    while (x >= 255) {\r\n      x -= 255;\r\n      x = (x >> 8) + (x & 255);\r\n    }\r\n    return x;\r\n  }\r\n\r\n  var genpoly = [];\r\n\r\n  // Calculate and append ECC data to data block.  Block is in strinbuf, indexes to buffers given.\r\n  function appendrs(data, dlen, ecbuf, eclen) {\r\n    var i, j, fb;\r\n\r\n    for (i = 0; i < eclen; i++)\r\n      strinbuf[ecbuf + i] = 0;\r\n    for (i = 0; i < dlen; i++) {\r\n      fb = glog[strinbuf[data + i] ^ strinbuf[ecbuf]];\r\n      if (fb != 255)     /* fb term is non-zero */\r\n        for (j = 1; j < eclen; j++)\r\n          strinbuf[ecbuf + j - 1] = strinbuf[ecbuf + j] ^ gexp[modnn(fb + genpoly[eclen - j])];\r\n      else\r\n        for (j = ecbuf; j < ecbuf + eclen; j++)\r\n          strinbuf[j] = strinbuf[j + 1];\r\n      strinbuf[ecbuf + eclen - 1] = fb == 255 ? 0 : gexp[modnn(fb + genpoly[0])];\r\n    }\r\n  }\r\n\r\n  //========================================================================\r\n  // Frame data insert following the path rules\r\n\r\n  // check mask - since symmetrical use half.\r\n  function ismasked(x, y) {\r\n    var bt;\r\n    if (x > y) {\r\n      bt = x;\r\n      x = y;\r\n      y = bt;\r\n    }\r\n    bt = y;\r\n    bt += y * y;\r\n    bt >>= 1;\r\n    bt += x;\r\n    return framask[bt];\r\n  }\r\n\r\n  //========================================================================\r\n  //  Apply the selected mask out of the 8.\r\n  function applymask(m) {\r\n    var x, y, r3x, r3y;\r\n\r\n    switch (m) {\r\n      case 0:\r\n        for (y = 0; y < width; y++)\r\n          for (x = 0; x < width; x++)\r\n            if (!((x + y) & 1) && !ismasked(x, y))\r\n              qrframe[x + y * width] ^= 1;\r\n        break;\r\n      case 1:\r\n        for (y = 0; y < width; y++)\r\n          for (x = 0; x < width; x++)\r\n            if (!(y & 1) && !ismasked(x, y))\r\n              qrframe[x + y * width] ^= 1;\r\n        break;\r\n      case 2:\r\n        for (y = 0; y < width; y++)\r\n          for (r3x = 0, x = 0; x < width; x++ , r3x++) {\r\n            if (r3x == 3)\r\n              r3x = 0;\r\n            if (!r3x && !ismasked(x, y))\r\n              qrframe[x + y * width] ^= 1;\r\n          }\r\n        break;\r\n      case 3:\r\n        for (r3y = 0, y = 0; y < width; y++ , r3y++) {\r\n          if (r3y == 3)\r\n            r3y = 0;\r\n          for (r3x = r3y, x = 0; x < width; x++ , r3x++) {\r\n            if (r3x == 3)\r\n              r3x = 0;\r\n            if (!r3x && !ismasked(x, y))\r\n              qrframe[x + y * width] ^= 1;\r\n          }\r\n        }\r\n        break;\r\n      case 4:\r\n        for (y = 0; y < width; y++)\r\n          for (r3x = 0, r3y = ((y >> 1) & 1), x = 0; x < width; x++ , r3x++) {\r\n            if (r3x == 3) {\r\n              r3x = 0;\r\n              r3y = !r3y;\r\n            }\r\n            if (!r3y && !ismasked(x, y))\r\n              qrframe[x + y * width] ^= 1;\r\n          }\r\n        break;\r\n      case 5:\r\n        for (r3y = 0, y = 0; y < width; y++ , r3y++) {\r\n          if (r3y == 3)\r\n            r3y = 0;\r\n          for (r3x = 0, x = 0; x < width; x++ , r3x++) {\r\n            if (r3x == 3)\r\n              r3x = 0;\r\n            if (!((x & y & 1) + !(!r3x | !r3y)) && !ismasked(x, y))\r\n              qrframe[x + y * width] ^= 1;\r\n          }\r\n        }\r\n        break;\r\n      case 6:\r\n        for (r3y = 0, y = 0; y < width; y++ , r3y++) {\r\n          if (r3y == 3)\r\n            r3y = 0;\r\n          for (r3x = 0, x = 0; x < width; x++ , r3x++) {\r\n            if (r3x == 3)\r\n              r3x = 0;\r\n            if (!(((x & y & 1) + (r3x && (r3x == r3y))) & 1) && !ismasked(x, y))\r\n              qrframe[x + y * width] ^= 1;\r\n          }\r\n        }\r\n        break;\r\n      case 7:\r\n        for (r3y = 0, y = 0; y < width; y++ , r3y++) {\r\n          if (r3y == 3)\r\n            r3y = 0;\r\n          for (r3x = 0, x = 0; x < width; x++ , r3x++) {\r\n            if (r3x == 3)\r\n              r3x = 0;\r\n            if (!(((r3x && (r3x == r3y)) + ((x + y) & 1)) & 1) && !ismasked(x, y))\r\n              qrframe[x + y * width] ^= 1;\r\n          }\r\n        }\r\n        break;\r\n    }\r\n    return;\r\n  }\r\n\r\n  // Badness coefficients.\r\n  var N1 = 3, N2 = 3, N3 = 40, N4 = 10;\r\n\r\n  // Using the table of the length of each run, calculate the amount of bad image \r\n  // - long runs or those that look like finders; called twice, once each for X and Y\r\n  function badruns(length) {\r\n    var i;\r\n    var runsbad = 0;\r\n    for (i = 0; i <= length; i++)\r\n      if (rlens[i] >= 5)\r\n        runsbad += N1 + rlens[i] - 5;\r\n    // BwBBBwB as in finder\r\n    for (i = 3; i < length - 1; i += 2)\r\n      if (rlens[i - 2] == rlens[i + 2]\r\n        && rlens[i + 2] == rlens[i - 1]\r\n        && rlens[i - 1] == rlens[i + 1]\r\n        && rlens[i - 1] * 3 == rlens[i]\r\n        // white around the black pattern? Not part of spec\r\n        && (rlens[i - 3] == 0 // beginning\r\n          || i + 3 > length  // end\r\n          || rlens[i - 3] * 3 >= rlens[i] * 4 || rlens[i + 3] * 3 >= rlens[i] * 4)\r\n      )\r\n        runsbad += N3;\r\n    return runsbad;\r\n  }\r\n\r\n  // Calculate how bad the masked image is - blocks, imbalance, runs, or finders.\r\n  function badcheck() {\r\n    var x, y, h, b, b1;\r\n    var thisbad = 0;\r\n    var bw = 0;\r\n\r\n    // blocks of same color.\r\n    for (y = 0; y < width - 1; y++)\r\n      for (x = 0; x < width - 1; x++)\r\n        if ((qrframe[x + width * y] && qrframe[(x + 1) + width * y]\r\n          && qrframe[x + width * (y + 1)] && qrframe[(x + 1) + width * (y + 1)]) // all black\r\n          || !(qrframe[x + width * y] || qrframe[(x + 1) + width * y]\r\n            || qrframe[x + width * (y + 1)] || qrframe[(x + 1) + width * (y + 1)])) // all white\r\n          thisbad += N2;\r\n\r\n    // X runs\r\n    for (y = 0; y < width; y++) {\r\n      rlens[0] = 0;\r\n      for (h = b = x = 0; x < width; x++) {\r\n        if ((b1 = qrframe[x + width * y]) == b)\r\n          rlens[h]++;\r\n        else\r\n          rlens[++h] = 1;\r\n        b = b1;\r\n        bw += b ? 1 : -1;\r\n      }\r\n      thisbad += badruns(h);\r\n    }\r\n\r\n    // black/white imbalance\r\n    if (bw < 0)\r\n      bw = -bw;\r\n\r\n    var big = bw;\r\n    var count = 0;\r\n    big += big << 2;\r\n    big <<= 1;\r\n    while (big > width * width)\r\n      big -= width * width, count++;\r\n    thisbad += count * N4;\r\n\r\n    // Y runs\r\n    for (x = 0; x < width; x++) {\r\n      rlens[0] = 0;\r\n      for (h = b = y = 0; y < width; y++) {\r\n        if ((b1 = qrframe[x + width * y]) == b)\r\n          rlens[h]++;\r\n        else\r\n          rlens[++h] = 1;\r\n        b = b1;\r\n      }\r\n      thisbad += badruns(h);\r\n    }\r\n    return thisbad;\r\n  }\r\n\r\n  function genframe(instring) {\r\n    var x, y, k, t, v, i, j, m;\r\n\r\n    // find the smallest version that fits the string\r\n    t = instring.length;\r\n    version = 0;\r\n    do {\r\n      version++;\r\n      k = (ecclevel - 1) * 4 + (version - 1) * 16;\r\n      neccblk1 = eccblocks[k++];\r\n      neccblk2 = eccblocks[k++];\r\n      datablkw = eccblocks[k++];\r\n      eccblkwid = eccblocks[k];\r\n      k = datablkw * (neccblk1 + neccblk2) + neccblk2 - 3 + (version <= 9);\r\n      if (t <= k)\r\n        break;\r\n    } while (version < 40);\r\n\r\n    // FIXME - insure that it fits insted of being truncated\r\n    width = 17 + 4 * version;\r\n\r\n    // allocate, clear and setup data structures\r\n    v = datablkw + (datablkw + eccblkwid) * (neccblk1 + neccblk2) + neccblk2;\r\n    for (t = 0; t < v; t++)\r\n      eccbuf[t] = 0;\r\n    strinbuf = instring.slice(0);\r\n\r\n    for (t = 0; t < width * width; t++)\r\n      qrframe[t] = 0;\r\n\r\n    for (t = 0; t < (width * (width + 1) + 1) / 2; t++)\r\n      framask[t] = 0;\r\n\r\n    // insert finders - black to frame, white to mask\r\n    for (t = 0; t < 3; t++) {\r\n      k = 0;\r\n      y = 0;\r\n      if (t == 1)\r\n        k = (width - 7);\r\n      if (t == 2)\r\n        y = (width - 7);\r\n      qrframe[(y + 3) + width * (k + 3)] = 1;\r\n      for (x = 0; x < 6; x++) {\r\n        qrframe[(y + x) + width * k] = 1;\r\n        qrframe[y + width * (k + x + 1)] = 1;\r\n        qrframe[(y + 6) + width * (k + x)] = 1;\r\n        qrframe[(y + x + 1) + width * (k + 6)] = 1;\r\n      }\r\n      for (x = 1; x < 5; x++) {\r\n        setmask(y + x, k + 1);\r\n        setmask(y + 1, k + x + 1);\r\n        setmask(y + 5, k + x);\r\n        setmask(y + x + 1, k + 5);\r\n      }\r\n      for (x = 2; x < 4; x++) {\r\n        qrframe[(y + x) + width * (k + 2)] = 1;\r\n        qrframe[(y + 2) + width * (k + x + 1)] = 1;\r\n        qrframe[(y + 4) + width * (k + x)] = 1;\r\n        qrframe[(y + x + 1) + width * (k + 4)] = 1;\r\n      }\r\n    }\r\n\r\n    // alignment blocks\r\n    if (version > 1) {\r\n      t = adelta[version];\r\n      y = width - 7;\r\n      for (; ;) {\r\n        x = width - 7;\r\n        while (x > t - 3) {\r\n          putalign(x, y);\r\n          if (x < t)\r\n            break;\r\n          x -= t;\r\n        }\r\n        if (y <= t + 9)\r\n          break;\r\n        y -= t;\r\n        putalign(6, y);\r\n        putalign(y, 6);\r\n      }\r\n    }\r\n\r\n    // single black\r\n    qrframe[8 + width * (width - 8)] = 1;\r\n\r\n    // timing gap - mask only\r\n    for (y = 0; y < 7; y++) {\r\n      setmask(7, y);\r\n      setmask(width - 8, y);\r\n      setmask(7, y + width - 7);\r\n    }\r\n    for (x = 0; x < 8; x++) {\r\n      setmask(x, 7);\r\n      setmask(x + width - 8, 7);\r\n      setmask(x, width - 8);\r\n    }\r\n\r\n    // reserve mask-format area\r\n    for (x = 0; x < 9; x++)\r\n      setmask(x, 8);\r\n    for (x = 0; x < 8; x++) {\r\n      setmask(x + width - 8, 8);\r\n      setmask(8, x);\r\n    }\r\n    for (y = 0; y < 7; y++)\r\n      setmask(8, y + width - 7);\r\n\r\n    // timing row/col\r\n    for (x = 0; x < width - 14; x++)\r\n      if (x & 1) {\r\n        setmask(8 + x, 6);\r\n        setmask(6, 8 + x);\r\n      }\r\n      else {\r\n        qrframe[(8 + x) + width * 6] = 1;\r\n        qrframe[6 + width * (8 + x)] = 1;\r\n      }\r\n\r\n    // version block\r\n    if (version > 6) {\r\n      t = vpat[version - 7];\r\n      k = 17;\r\n      for (x = 0; x < 6; x++)\r\n        for (y = 0; y < 3; y++ , k--)\r\n          if (1 & (k > 11 ? version >> (k - 12) : t >> k)) {\r\n            qrframe[(5 - x) + width * (2 - y + width - 11)] = 1;\r\n            qrframe[(2 - y + width - 11) + width * (5 - x)] = 1;\r\n          }\r\n          else {\r\n            setmask(5 - x, 2 - y + width - 11);\r\n            setmask(2 - y + width - 11, 5 - x);\r\n          }\r\n    }\r\n\r\n    // sync mask bits - only set above for white spaces, so add in black bits\r\n    for (y = 0; y < width; y++)\r\n      for (x = 0; x <= y; x++)\r\n        if (qrframe[x + width * y])\r\n          setmask(x, y);\r\n\r\n    // convert string to bitstream\r\n    // 8 bit data to QR-coded 8 bit data (numeric or alphanum, or kanji not supported)\r\n    v = strinbuf.length;\r\n\r\n    // string to array\r\n    for (i = 0; i < v; i++)\r\n      eccbuf[i] = strinbuf.charCodeAt(i);\r\n    strinbuf = eccbuf.slice(0);\r\n\r\n    // calculate max string length\r\n    x = datablkw * (neccblk1 + neccblk2) + neccblk2;\r\n    if (v >= x - 2) {\r\n      v = x - 2;\r\n      if (version > 9)\r\n        v--;\r\n    }\r\n\r\n    // shift and repack to insert length prefix\r\n    i = v;\r\n    if (version > 9) {\r\n      strinbuf[i + 2] = 0;\r\n      strinbuf[i + 3] = 0;\r\n      while (i--) {\r\n        t = strinbuf[i];\r\n        strinbuf[i + 3] |= 255 & (t << 4);\r\n        strinbuf[i + 2] = t >> 4;\r\n      }\r\n      strinbuf[2] |= 255 & (v << 4);\r\n      strinbuf[1] = v >> 4;\r\n      strinbuf[0] = 0x40 | (v >> 12);\r\n    }\r\n    else {\r\n      strinbuf[i + 1] = 0;\r\n      strinbuf[i + 2] = 0;\r\n      while (i--) {\r\n        t = strinbuf[i];\r\n        strinbuf[i + 2] |= 255 & (t << 4);\r\n        strinbuf[i + 1] = t >> 4;\r\n      }\r\n      strinbuf[1] |= 255 & (v << 4);\r\n      strinbuf[0] = 0x40 | (v >> 4);\r\n    }\r\n    // fill to end with pad pattern\r\n    i = v + 3 - (version < 10);\r\n    while (i < x) {\r\n      strinbuf[i++] = 0xec;\r\n      // buffer has room    if (i == x)      break;\r\n      strinbuf[i++] = 0x11;\r\n    }\r\n\r\n    // calculate and append ECC\r\n\r\n    // calculate generator polynomial\r\n    genpoly[0] = 1;\r\n    for (i = 0; i < eccblkwid; i++) {\r\n      genpoly[i + 1] = 1;\r\n      for (j = i; j > 0; j--)\r\n        genpoly[j] = genpoly[j]\r\n          ? genpoly[j - 1] ^ gexp[modnn(glog[genpoly[j]] + i)] : genpoly[j - 1];\r\n      genpoly[0] = gexp[modnn(glog[genpoly[0]] + i)];\r\n    }\r\n    for (i = 0; i <= eccblkwid; i++)\r\n      genpoly[i] = glog[genpoly[i]]; // use logs for genpoly[] to save calc step\r\n\r\n    // append ecc to data buffer\r\n    k = x;\r\n    y = 0;\r\n    for (i = 0; i < neccblk1; i++) {\r\n      appendrs(y, datablkw, k, eccblkwid);\r\n      y += datablkw;\r\n      k += eccblkwid;\r\n    }\r\n    for (i = 0; i < neccblk2; i++) {\r\n      appendrs(y, datablkw + 1, k, eccblkwid);\r\n      y += datablkw + 1;\r\n      k += eccblkwid;\r\n    }\r\n    // interleave blocks\r\n    y = 0;\r\n    for (i = 0; i < datablkw; i++) {\r\n      for (j = 0; j < neccblk1; j++)\r\n        eccbuf[y++] = strinbuf[i + j * datablkw];\r\n      for (j = 0; j < neccblk2; j++)\r\n        eccbuf[y++] = strinbuf[(neccblk1 * datablkw) + i + (j * (datablkw + 1))];\r\n    }\r\n    for (j = 0; j < neccblk2; j++)\r\n      eccbuf[y++] = strinbuf[(neccblk1 * datablkw) + i + (j * (datablkw + 1))];\r\n    for (i = 0; i < eccblkwid; i++)\r\n      for (j = 0; j < neccblk1 + neccblk2; j++)\r\n        eccbuf[y++] = strinbuf[x + i + j * eccblkwid];\r\n    strinbuf = eccbuf;\r\n\r\n    // pack bits into frame avoiding masked area.\r\n    x = y = width - 1;\r\n    k = v = 1;         // up, minus\r\n    /* inteleaved data and ecc codes */\r\n    m = (datablkw + eccblkwid) * (neccblk1 + neccblk2) + neccblk2;\r\n    for (i = 0; i < m; i++) {\r\n      t = strinbuf[i];\r\n      for (j = 0; j < 8; j++ , t <<= 1) {\r\n        if (0x80 & t)\r\n          qrframe[x + width * y] = 1;\r\n        do {        // find next fill position\r\n          if (v)\r\n            x--;\r\n          else {\r\n            x++;\r\n            if (k) {\r\n              if (y != 0)\r\n                y--;\r\n              else {\r\n                x -= 2;\r\n                k = !k;\r\n                if (x == 6) {\r\n                  x--;\r\n                  y = 9;\r\n                }\r\n              }\r\n            }\r\n            else {\r\n              if (y != width - 1)\r\n                y++;\r\n              else {\r\n                x -= 2;\r\n                k = !k;\r\n                if (x == 6) {\r\n                  x--;\r\n                  y -= 8;\r\n                }\r\n              }\r\n            }\r\n          }\r\n          v = !v;\r\n        } while (ismasked(x, y));\r\n      }\r\n    }\r\n\r\n    // save pre-mask copy of frame\r\n    strinbuf = qrframe.slice(0);\r\n    t = 0;           // best\r\n    y = 30000;         // demerit\r\n    // for instead of while since in original arduino code\r\n    // if an early mask was \"good enough\" it wouldn't try for a better one\r\n    // since they get more complex and take longer.\r\n    for (k = 0; k < 8; k++) {\r\n      applymask(k);      // returns black-white imbalance\r\n      x = badcheck();\r\n      if (x < y) { // current mask better than previous best?\r\n        y = x;\r\n        t = k;\r\n      }\r\n      if (t == 7)\r\n        break;       // don't increment i to a void redoing mask\r\n      qrframe = strinbuf.slice(0); // reset for next pass\r\n    }\r\n    if (t != k)         // redo best mask - none good enough, last wasn't t\r\n      applymask(t);\r\n\r\n    // add in final mask/ecclevel bytes\r\n    y = fmtword[t + ((ecclevel - 1) << 3)];\r\n    // low byte\r\n    for (k = 0; k < 8; k++ , y >>= 1)\r\n      if (y & 1) {\r\n        qrframe[(width - 1 - k) + width * 8] = 1;\r\n        if (k < 6)\r\n          qrframe[8 + width * k] = 1;\r\n        else\r\n          qrframe[8 + width * (k + 1)] = 1;\r\n      }\r\n    // high byte\r\n    for (k = 0; k < 7; k++ , y >>= 1)\r\n      if (y & 1) {\r\n        qrframe[8 + width * (width - 7 + k)] = 1;\r\n        if (k)\r\n          qrframe[(6 - k) + width * 8] = 1;\r\n        else\r\n          qrframe[7 + width * 8] = 1;\r\n      }\r\n    return qrframe;\r\n  }\r\n\r\n\r\n\r\n\r\n  var _canvas = null;\r\n\r\n  export const api = {\r\n\r\n    get ecclevel() {\r\n      return ecclevel;\r\n    },\r\n\r\n    set ecclevel(val) {\r\n      ecclevel = val;\r\n    },\r\n\r\n    get size() {\r\n      return _size;\r\n    },\r\n\r\n    set size(val) {\r\n      _size = val\r\n    },\r\n\r\n    get canvas() {\r\n      return _canvas;\r\n    },\r\n\r\n    set canvas(el) {\r\n      _canvas = el;\r\n    },\r\n\r\n    getFrame: function (string) {\r\n      return genframe(string);\r\n    },\r\n    //这里的utf16to8(str)是对Text中的字符串进行转码，让其支持中文\r\n    utf16to8: function (str) {\r\n      var out, i, len, c;\r\n\r\n      out = \"\";\r\n      len = str.length;\r\n      for (i = 0; i < len; i++) {\r\n        c = str.charCodeAt(i);\r\n        if ((c >= 0x0001) && (c <= 0x007F)) {\r\n          out += str.charAt(i);\r\n        } else if (c > 0x07FF) {\r\n          out += String.fromCharCode(0xE0 | ((c >> 12) & 0x0F));\r\n          out += String.fromCharCode(0x80 | ((c >> 6) & 0x3F));\r\n          out += String.fromCharCode(0x80 | ((c >> 0) & 0x3F));\r\n        } else {\r\n          out += String.fromCharCode(0xC0 | ((c >> 6) & 0x1F));\r\n          out += String.fromCharCode(0x80 | ((c >> 0) & 0x3F));\r\n        }\r\n      }\r\n      return out;\r\n    },\r\n    /**\r\n     * 新增$this参数，传入组件的this,兼容在组件中生成\r\n     * @param bg 目前只能设置颜色值\r\n     */ \r\n    draw: function (str, ctx, startX, startY, cavW, cavH, bg, color, $this, ecc) {\r\n      var that = this;\r\n      ecclevel = ecc || ecclevel;\r\n      if (!ctx) {\r\n        console.warn('No canvas provided to draw QR code in!')\r\n        return;\r\n      }\r\n      var size = Math.min(cavW, cavH);\r\n      str = that.utf16to8(str);//增加中文显示\r\n\r\n      var frame = that.getFrame(str);\r\n      var px = size / width;\r\n      if (bg) {\r\n        ctx.fillStyle = bg\r\n        ctx.fillRect(startX, startY, cavW, cavW);\r\n      }\r\n      ctx.fillStyle = color || 'black'\r\n      for (var i = 0; i < width; i++) {\r\n        for (var j = 0; j < width; j++) {\r\n          if (frame[j * width + i]) {\r\n            ctx.fillRect(startX + px * i, startY + px * j, px, px);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n "],"mappings":";;;;;;;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAMA;AACA;AAQA;AAEA;AACA;AACA;AAJA;AACA;AAOA;AACA;AA2CA;AACA;AAmBA;AAoBA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAKA;AACA;AACA;AAGA;AAEA;AACA;AACA;AADA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AACA;AACA;AAGA;AACA;AAAA;AACA;AAEA;AAEA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AAhFA;AACA;AAiFA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAKA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAIA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAIA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AADA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAGA;AACA;AACA;AADA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AAAA;AACA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AAAA;AAEA;AACA;AAIA;AACA;AAAA;AACA;AACA;AAIA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9EA;;;;A","sourceRoot":""}